package com.ruhuna.event_ticket_management_system.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 */
@SuppressWarnings("rawtypes")
public class TicketNFT extends Contract {
    public static final String BINARY = "608060405260fa60095534801561001557600080fd5b506040516137493803806137498339818101604052810190610037919061032f565b336040518060400160405280600981526020017f5469636b65744e465400000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f544e46540000000000000000000000000000000000000000000000000000000081525081600090816100b391906105ac565b5080600190816100c391906105ac565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101385760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012f919061069f565b60405180910390fd5b6101478161020660201b60201c565b506001600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b690610717565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610737565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102fc826102d1565b9050919050565b61030c816102f1565b811461031757600080fd5b50565b60008151905061032981610303565b92915050565b600060208284031215610345576103446102cc565b5b60006103538482850161031a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103dd57607f821691505b6020821081036103f0576103ef610396565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261041b565b610462868361041b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104a96104a461049f8461047a565b610484565b61047a565b9050919050565b6000819050919050565b6104c38361048e565b6104d76104cf826104b0565b848454610428565b825550505050565b600090565b6104ec6104df565b6104f78184846104ba565b505050565b5b8181101561051b576105106000826104e4565b6001810190506104fd565b5050565b601f82111561056057610531816103f6565b61053a8461040b565b81016020851015610549578190505b61055d6105558561040b565b8301826104fc565b50505b505050565b600082821c905092915050565b600061058360001984600802610565565b1980831691505092915050565b600061059c8383610572565b9150826002028217905092915050565b6105b58261035c565b67ffffffffffffffff8111156105ce576105cd610367565b5b6105d882546103c5565b6105e382828561051f565b600060209050601f8311600181146106165760008415610604578287015190505b61060e8582610590565b865550610676565b601f198416610624866103f6565b60005b8281101561064c57848901518255600182019150602085019450602081019050610627565b868310156106695784890151610665601f891682610572565b8355505b6001600288020188555050505b505050505050565b6000610689826102d1565b9050919050565b6106998161067e565b82525050565b60006020820190506106b46000830184610690565b92915050565b600082825260208201905092915050565b7f496e76616c696420747265617375727900000000000000000000000000000000600082015250565b60006107016010836106ba565b915061070c826106cb565b602082019050919050565b60006020820190508181036000830152610730816106f4565b9050919050565b613003806107466000396000f3fe6080604052600436106101395760003560e01c806395d89b41116100ab578063e985e9c51161006f578063e985e9c51461045b578063ec0662be14610498578063eeca08f0146104d5578063f0f4426014610500578063f2fde38b14610529578063fe7cce421461055257610179565b806395d89b4114610385578063a22cb465146103b0578063b88d4fde146103d9578063c87b56dd14610402578063e9818d221461043f57610179565b806342842e0e116100fd57806342842e0e1461027557806361d027b31461029e5780636352211e146102c957806370a0823114610306578063715018a6146103435780638da5cb5b1461035a57610179565b806301ffc9a71461017e57806306fdde03146101bb578063081812fc146101e6578063095ea7b31461022357806323b872dd1461024c57610179565b36610179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017090611e1a565b60405180910390fd5b600080fd5b34801561018a57600080fd5b506101a560048036038101906101a09190611ea6565b61058f565b6040516101b29190611eee565b60405180910390f35b3480156101c757600080fd5b506101d0610671565b6040516101dd9190611f88565b60405180910390f35b3480156101f257600080fd5b5061020d60048036038101906102089190611fe0565b610703565b60405161021a919061204e565b60405180910390f35b34801561022f57600080fd5b5061024a60048036038101906102459190612095565b61071f565b005b34801561025857600080fd5b50610273600480360381019061026e91906120d5565b610735565b005b34801561028157600080fd5b5061029c600480360381019061029791906120d5565b610837565b005b3480156102aa57600080fd5b506102b3610857565b6040516102c09190612149565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb9190611fe0565b61087d565b6040516102fd919061204e565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190612164565b61088f565b60405161033a91906121a0565b60405180910390f35b34801561034f57600080fd5b50610358610949565b005b34801561036657600080fd5b5061036f61095d565b60405161037c919061204e565b60405180910390f35b34801561039157600080fd5b5061039a610987565b6040516103a79190611f88565b60405180910390f35b3480156103bc57600080fd5b506103d760048036038101906103d291906121e7565b610a19565b005b3480156103e557600080fd5b5061040060048036038101906103fb919061235c565b610a2f565b005b34801561040e57600080fd5b5061042960048036038101906104249190611fe0565b610a54565b6040516104369190611f88565b60405180910390f35b610459600480360381019061045491906124a1565b610b3d565b005b34801561046757600080fd5b50610482600480360381019061047d9190612550565b610d3e565b60405161048f9190611eee565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba9190612590565b610dd2565b6040516104cc9190611eee565b60405180910390f35b3480156104e157600080fd5b506104ea610f3a565b6040516104f791906121a0565b60405180910390f35b34801561050c57600080fd5b50610527600480360381019061052291906125f0565b610f40565b005b34801561053557600080fd5b50610550600480360381019061054b9190612164565b610f8c565b005b34801561055e57600080fd5b5061057960048036038101906105749190611fe0565b611012565b604051610586919061262c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061065a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061066a57506106698261102a565b5b9050919050565b60606000805461068090612676565b80601f01602080910402602001604051908101604052809291908181526020018280546106ac90612676565b80156106f95780601f106106ce576101008083540402835291602001916106f9565b820191906000526020600020905b8154815290600101906020018083116106dc57829003601f168201915b5050505050905090565b600061070e82611094565b506107188261111c565b9050919050565b610731828261072c611159565b611161565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107a75760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161079e919061204e565b60405180910390fd5b60006107bb83836107b6611159565b611173565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610831578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610828939291906126a7565b60405180910390fd5b50505050565b61085283838360405180602001604052806000815250610a2f565b505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061088882611094565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109025760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016108f9919061204e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61095161138d565b61095b6000611414565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461099690612676565b80601f01602080910402602001604051908101604052809291908181526020018280546109c290612676565b8015610a0f5780601f106109e457610100808354040283529160200191610a0f565b820191906000526020600020905b8154815290600101906020018083116109f257829003601f168201915b5050505050905090565b610a2b610a24611159565b83836114da565b5050565b610a3a848484610735565b610a4e610a45611159565b85858585611649565b50505050565b6060600073ffffffffffffffffffffffffffffffffffffffff16610a77836117fa565b73ffffffffffffffffffffffffffffffffffffffff1603610acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac490612750565b60405180910390fd5b6040518060400160405280601d81526020017f68747470733a2f2f676174657761792e697066732e696f2f697066732f000000815250600a6000848152602001908152602001600020604051602001610b27929190612844565b6040516020818303038152906040529050919050565b610b45611837565b80341015610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f906128b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bee90612920565b60405180910390fd5b610c01878761187d565b8484600a60008981526020019081526020016000209182610c23929190612ae2565b5082600b600088815260200190815260200160002081905550600061271060095483610c4f9190612be1565b610c599190612c52565b905060008183610c699190612c83565b9050610c97600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361189b565b610ca1848261189b565b600083340390506000811115610cbc57610cbb338261189b565b5b508373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16897ff61a3d65473a63beea4f6dd5a7bfab9bc0e671c90be51bcd4758bfb5a989e3948a8a888888604051610d23959493929190612ce4565b60405180910390a45050610d3561194c565b50505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16610df4856117fa565b73ffffffffffffffffffffffffffffffffffffffff1614610e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4190612da4565b60405180910390fd5b6000600a60008681526020019081526020016000208054610e6a90612676565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9690612676565b8015610ee35780601f10610eb857610100808354040283529160200191610ee3565b820191906000526020600020905b815481529060010190602001808311610ec657829003601f168201915b505050505090506000818585604051602001610f0193929190612de9565b604051602081830303815290604052805190602001209050600b6000878152602001908152602001600020548114925050509392505050565b60095481565b610f4861138d565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610f9461138d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110065760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ffd919061204e565b60405180910390fd5b61100f81611414565b50565b600b6020528060005260406000206000915090505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806110a0836117fa565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111357826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161110a91906121a0565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b61116e8383836001611956565b505050565b60008061117f846117fa565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146111c1576111c0818486611b1b565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461125257611203600085600080611956565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146112d5576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b611395611159565b73ffffffffffffffffffffffffffffffffffffffff166113b361095d565b73ffffffffffffffffffffffffffffffffffffffff1614611412576113d6611159565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611409919061204e565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361154b57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401611542919061204e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161163c9190611eee565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156117f3578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b81526004016116a89493929190612e64565b6020604051808303816000875af19250505080156116e457506040513d601f19601f820116820180604052508101906116e19190612ec5565b60015b611768573d8060008114611714576040519150601f19603f3d011682016040523d82523d6000602084013e611719565b606091505b50600081510361176057836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611757919061204e565b60405180910390fd5b805160208201fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117f157836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016117e8919061204e565b60405180910390fd5b505b5050505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600260075403611873576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600781905550565b611897828260405180602001604052806000815250611bdf565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff16826040516118c190612f23565b60006040518083038185875af1925050503d80600081146118fe576040519150601f19603f3d011682016040523d82523d6000602084013e611903565b606091505b5050905080611947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e90612f84565b60405180910390fd5b505050565b6001600781905550565b808061198f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611ac357600061199f84611094565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611a0a57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611a1d5750611a1b8184610d3e565b155b15611a5f57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611a56919061204e565b60405180910390fd5b8115611ac157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611b26838383611c03565b611bda57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b9b57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611b9291906121a0565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611bd1929190612fa4565b60405180910390fd5b505050565b611be98383611cc4565b611bfe611bf4611159565b6000858585611649565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611cbb57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611c7c5750611c7b8484610d3e565b5b80611cba57508273ffffffffffffffffffffffffffffffffffffffff16611ca28361111c565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d365760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611d2d919061204e565b60405180910390fd5b6000611d4483836000611173565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611db85760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611daf919061204e565b60405180910390fd5b505050565b600082825260208201905092915050565b7f557365206d696e74576974685061796d656e7400000000000000000000000000600082015250565b6000611e04601383611dbd565b9150611e0f82611dce565b602082019050919050565b60006020820190508181036000830152611e3381611df7565b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e8381611e4e565b8114611e8e57600080fd5b50565b600081359050611ea081611e7a565b92915050565b600060208284031215611ebc57611ebb611e44565b5b6000611eca84828501611e91565b91505092915050565b60008115159050919050565b611ee881611ed3565b82525050565b6000602082019050611f036000830184611edf565b92915050565b600081519050919050565b60005b83811015611f32578082015181840152602081019050611f17565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f5a82611f09565b611f648185611dbd565b9350611f74818560208601611f14565b611f7d81611f3e565b840191505092915050565b60006020820190508181036000830152611fa28184611f4f565b905092915050565b6000819050919050565b611fbd81611faa565b8114611fc857600080fd5b50565b600081359050611fda81611fb4565b92915050565b600060208284031215611ff657611ff5611e44565b5b600061200484828501611fcb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120388261200d565b9050919050565b6120488161202d565b82525050565b6000602082019050612063600083018461203f565b92915050565b6120728161202d565b811461207d57600080fd5b50565b60008135905061208f81612069565b92915050565b600080604083850312156120ac576120ab611e44565b5b60006120ba85828601612080565b92505060206120cb85828601611fcb565b9150509250929050565b6000806000606084860312156120ee576120ed611e44565b5b60006120fc86828701612080565b935050602061210d86828701612080565b925050604061211e86828701611fcb565b9150509250925092565b60006121338261200d565b9050919050565b61214381612128565b82525050565b600060208201905061215e600083018461213a565b92915050565b60006020828403121561217a57612179611e44565b5b600061218884828501612080565b91505092915050565b61219a81611faa565b82525050565b60006020820190506121b56000830184612191565b92915050565b6121c481611ed3565b81146121cf57600080fd5b50565b6000813590506121e1816121bb565b92915050565b600080604083850312156121fe576121fd611e44565b5b600061220c85828601612080565b925050602061221d858286016121d2565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61226982611f3e565b810181811067ffffffffffffffff8211171561228857612287612231565b5b80604052505050565b600061229b611e3a565b90506122a78282612260565b919050565b600067ffffffffffffffff8211156122c7576122c6612231565b5b6122d082611f3e565b9050602081019050919050565b82818337600083830152505050565b60006122ff6122fa846122ac565b612291565b90508281526020810184848401111561231b5761231a61222c565b5b6123268482856122dd565b509392505050565b600082601f83011261234357612342612227565b5b81356123538482602086016122ec565b91505092915050565b6000806000806080858703121561237657612375611e44565b5b600061238487828801612080565b945050602061239587828801612080565b93505060406123a687828801611fcb565b925050606085013567ffffffffffffffff8111156123c7576123c6611e49565b5b6123d38782880161232e565b91505092959194509250565b600080fd5b600080fd5b60008083601f8401126123ff576123fe612227565b5b8235905067ffffffffffffffff81111561241c5761241b6123df565b5b602083019150836001820283011115612438576124376123e4565b5b9250929050565b6000819050919050565b6124528161243f565b811461245d57600080fd5b50565b60008135905061246f81612449565b92915050565b61247e81612128565b811461248957600080fd5b50565b60008135905061249b81612475565b92915050565b600080600080600080600060c0888a0312156124c0576124bf611e44565b5b60006124ce8a828b01612080565b97505060206124df8a828b01611fcb565b965050604088013567ffffffffffffffff811115612500576124ff611e49565b5b61250c8a828b016123e9565b9550955050606061251f8a828b01612460565b93505060806125308a828b0161248c565b92505060a06125418a828b01611fcb565b91505092959891949750929550565b6000806040838503121561256757612566611e44565b5b600061257585828601612080565b925050602061258685828601612080565b9150509250929050565b6000806000604084860312156125a9576125a8611e44565b5b60006125b786828701611fcb565b935050602084013567ffffffffffffffff8111156125d8576125d7611e49565b5b6125e4868287016123e9565b92509250509250925092565b60006020828403121561260657612605611e44565b5b60006126148482850161248c565b91505092915050565b6126268161243f565b82525050565b6000602082019050612641600083018461261d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061268e57607f821691505b6020821081036126a1576126a0612647565b5b50919050565b60006060820190506126bc600083018661203f565b6126c96020830185612191565b6126d6604083018461203f565b949350505050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061273a602f83611dbd565b9150612745826126de565b604082019050919050565b600060208201905081810360008301526127698161272d565b9050919050565b600081905092915050565b600061278682611f09565b6127908185612770565b93506127a0818560208601611f14565b80840191505092915050565b60008190508160005260206000209050919050565b600081546127ce81612676565b6127d88186612770565b945060018216600081146127f357600181146128085761283b565b60ff198316865281151582028601935061283b565b612811856127ac565b60005b8381101561283357815481890152600182019150602081019050612814565b838801955050505b50505092915050565b6000612850828561277b565b915061285c82846127c1565b91508190509392505050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b600061289e601483611dbd565b91506128a982612868565b602082019050919050565b600060208201905081810360008301526128cd81612891565b9050919050565b7f496e76616c6964206f7267616e697a6572000000000000000000000000000000600082015250565b600061290a601183611dbd565b9150612915826128d4565b602082019050919050565b60006020820190508181036000830152612939816128fd565b9050919050565b600082905092915050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261295b565b6129a2868361295b565b95508019841693508086168417925050509392505050565b6000819050919050565b60006129df6129da6129d584611faa565b6129ba565b611faa565b9050919050565b6000819050919050565b6129f9836129c4565b612a0d612a05826129e6565b848454612968565b825550505050565b600090565b612a22612a15565b612a2d8184846129f0565b505050565b5b81811015612a5157612a46600082612a1a565b600181019050612a33565b5050565b601f821115612a9657612a67816127ac565b612a708461294b565b81016020851015612a7f578190505b612a93612a8b8561294b565b830182612a32565b50505b505050565b600082821c905092915050565b6000612ab960001984600802612a9b565b1980831691505092915050565b6000612ad28383612aa8565b9150826002028217905092915050565b612aec8383612940565b67ffffffffffffffff811115612b0557612b04612231565b5b612b0f8254612676565b612b1a828285612a55565b6000601f831160018114612b495760008415612b37578287013590505b612b418582612ac6565b865550612ba9565b601f198416612b57866127ac565b60005b82811015612b7f57848901358255600182019150602085019450602081019050612b5a565b86831015612b9c5784890135612b98601f891682612aa8565b8355505b6001600288020188555050505b50505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bec82611faa565b9150612bf783611faa565b9250828202612c0581611faa565b91508282048414831517612c1c57612c1b612bb2565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c5d82611faa565b9150612c6883611faa565b925082612c7857612c77612c23565b5b828204905092915050565b6000612c8e82611faa565b9150612c9983611faa565b9250828203905081811115612cb157612cb0612bb2565b5b92915050565b6000612cc38385611dbd565b9350612cd08385846122dd565b612cd983611f3e565b840190509392505050565b60006080820190508181036000830152612cff818789612cb7565b9050612d0e6020830186612191565b612d1b6040830185612191565b612d286060830184612191565b9695505050505050565b7f43616c6c6572206973206e6f7420746865206f776e6572206f6620746865204e60008201527f46542e0000000000000000000000000000000000000000000000000000000000602082015250565b6000612d8e602383611dbd565b9150612d9982612d32565b604082019050919050565b60006020820190508181036000830152612dbd81612d81565b9050919050565b6000612dd08385612770565b9350612ddd8385846122dd565b82840190509392505050565b6000612df5828661277b565b9150612e02828486612dc4565b9150819050949350505050565b600081519050919050565b600082825260208201905092915050565b6000612e3682612e0f565b612e408185612e1a565b9350612e50818560208601611f14565b612e5981611f3e565b840191505092915050565b6000608082019050612e79600083018761203f565b612e86602083018661203f565b612e936040830185612191565b8181036060830152612ea58184612e2b565b905095945050505050565b600081519050612ebf81611e7a565b92915050565b600060208284031215612edb57612eda611e44565b5b6000612ee984828501612eb0565b91505092915050565b600081905092915050565b50565b6000612f0d600083612ef2565b9150612f1882612efd565b600082019050919050565b6000612f2e82612f00565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612f6e600f83611dbd565b9150612f7982612f38565b602082019050919050565b60006020820190508181036000830152612f9d81612f61565b9050919050565b6000604082019050612fb9600083018561203f565b612fc66020830184612191565b939250505056fea264697066735822122029084d806d00bc2f3bd7941811f8b517a9e6f78e88fadade6d23b975b5d715bc64736f6c634300081c0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTWITHPAYMENT = "mintWithPayment";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PLATFORMFEERATE = "platformFeeRate";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETTREASURY = "setTreasury";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENCOMMITMENTS = "tokenCommitments";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TREASURY = "treasury";

    public static final String FUNC_VERIFYTICKET = "verifyTicket";

    public static final CustomError ERC721INCORRECTOWNER_ERROR = new CustomError("ERC721IncorrectOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INSUFFICIENTAPPROVAL_ERROR = new CustomError("ERC721InsufficientApproval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final CustomError ERC721INVALIDAPPROVER_ERROR = new CustomError("ERC721InvalidApprover", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDOPERATOR_ERROR = new CustomError("ERC721InvalidOperator", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDOWNER_ERROR = new CustomError("ERC721InvalidOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDRECEIVER_ERROR = new CustomError("ERC721InvalidReceiver", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDSENDER_ERROR = new CustomError("ERC721InvalidSender", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721NONEXISTENTTOKEN_ERROR = new CustomError("ERC721NonexistentToken", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final CustomError OWNABLEINVALIDOWNER_ERROR = new CustomError("OwnableInvalidOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError OWNABLEUNAUTHORIZEDACCOUNT_ERROR = new CustomError("OwnableUnauthorizedAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError REENTRANCYGUARDREENTRANTCALL_ERROR = new CustomError("ReentrancyGuardReentrantCall",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TICKETMINTED_EVENT = new Event("TicketMinted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected TicketNFT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TicketNFT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TicketNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TicketNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TicketMintedEventResponse> getTicketMintedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TICKETMINTED_EVENT, transactionReceipt);
        ArrayList<TicketMintedEventResponse> responses = new ArrayList<TicketMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TicketMintedEventResponse typedResponse = new TicketMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.organizer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.metadataURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pricePaid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.platformFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.organizerPayout = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TicketMintedEventResponse getTicketMintedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TICKETMINTED_EVENT, log);
        TicketMintedEventResponse typedResponse = new TicketMintedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.organizer = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.metadataURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.pricePaid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.platformFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.organizerPayout = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<TicketMintedEventResponse> ticketMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTicketMintedEventFromLog(log));
    }

    public Flowable<TicketMintedEventResponse> ticketMintedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TICKETMINTED_EVENT));
        return ticketMintedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintWithPayment(String to, BigInteger tokenId,
                                                                  String metadataCID, byte[] commitmentHash, String organizerAddress,
                                                                  BigInteger ticketPrice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINTWITHPAYMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                        new org.web3j.abi.datatypes.Utf8String(metadataCID),
                        new org.web3j.abi.datatypes.generated.Bytes32(commitmentHash),
                        new org.web3j.abi.datatypes.Address(160, organizerAddress),
                        new org.web3j.abi.datatypes.generated.Uint256(ticketPrice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> platformFeeRate() {
        final Function function = new Function(FUNC_PLATFORMFEERATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTreasury(String _newTreasury) {
        final Function function = new Function(
                FUNC_SETTREASURY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newTreasury)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> tokenCommitments(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENCOMMITMENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> treasury() {
        final Function function = new Function(FUNC_TREASURY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> verifyTicket(BigInteger tokenId, String secretNonce) {
        final Function function = new Function(FUNC_VERIFYTICKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(secretNonce)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static TicketNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new TicketNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TicketNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TicketNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TicketNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new TicketNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TicketNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TicketNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TicketNFT> deploy(Web3j web3j, Credentials credentials,
                                               ContractGasProvider contractGasProvider, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TicketNFT> deploy(Web3j web3j, TransactionManager transactionManager,
                                               ContractGasProvider contractGasProvider, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TicketNFT> deploy(Web3j web3j, Credentials credentials,
                                               BigInteger gasPrice, BigInteger gasLimit, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TicketNFT> deploy(Web3j web3j, TransactionManager transactionManager,
                                               BigInteger gasPrice, BigInteger gasLimit, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TicketMintedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String buyer;

        public String organizer;

        public String metadataURI;

        public BigInteger pricePaid;

        public BigInteger platformFee;

        public BigInteger organizerPayout;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
