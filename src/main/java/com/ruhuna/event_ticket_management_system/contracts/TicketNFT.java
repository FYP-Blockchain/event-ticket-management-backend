package com.ruhuna.event_ticket_management_system.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 */
@SuppressWarnings("rawtypes")
public class TicketNFT extends Contract {
    public static final String BINARY = "608060405260fa60095534801561001557600080fd5b506040516138903803806138908339818101604052810190610037919061032f565b336040518060400160405280600981526020017f5469636b65744e465400000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f544e46540000000000000000000000000000000000000000000000000000000081525081600090816100b391906105ac565b5080600190816100c391906105ac565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101385760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012f919061069f565b60405180910390fd5b6101478161020660201b60201c565b506001600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b690610717565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610737565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102fc826102d1565b9050919050565b61030c816102f1565b811461031757600080fd5b50565b60008151905061032981610303565b92915050565b600060208284031215610345576103446102cc565b5b60006103538482850161031a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103dd57607f821691505b6020821081036103f0576103ef610396565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261041b565b610462868361041b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104a96104a461049f8461047a565b610484565b61047a565b9050919050565b6000819050919050565b6104c38361048e565b6104d76104cf826104b0565b848454610428565b825550505050565b600090565b6104ec6104df565b6104f78184846104ba565b505050565b5b8181101561051b576105106000826104e4565b6001810190506104fd565b5050565b601f82111561056057610531816103f6565b61053a8461040b565b81016020851015610549578190505b61055d6105558561040b565b8301826104fc565b50505b505050565b600082821c905092915050565b600061058360001984600802610565565b1980831691505092915050565b600061059c8383610572565b9150826002028217905092915050565b6105b58261035c565b67ffffffffffffffff8111156105ce576105cd610367565b5b6105d882546103c5565b6105e382828561051f565b600060209050601f8311600181146106165760008415610604578287015190505b61060e8582610590565b865550610676565b601f198416610624866103f6565b60005b8281101561064c57848901518255600182019150602085019450602081019050610627565b868310156106695784890151610665601f891682610572565b8355505b6001600288020188555050505b505050505050565b6000610689826102d1565b9050919050565b6106998161067e565b82525050565b60006020820190506106b46000830184610690565b92915050565b600082825260208201905092915050565b7f496e76616c696420747265617375727900000000000000000000000000000000600082015250565b60006107016010836106ba565b915061070c826106cb565b602082019050919050565b60006020820190508181036000830152610730816106f4565b9050919050565b61314a806107466000396000f3fe6080604052600436106101445760003560e01c80638da5cb5b116100b6578063e985e9c51161006f578063e985e9c5146104a3578063ec0662be146104e0578063eeca08f01461051d578063f0f4426014610548578063f2fde38b14610571578063fe7cce421461059a57610184565b80638da5cb5b146103a257806395d89b41146103cd578063a22cb465146103f8578063b88d4fde14610421578063c87b56dd1461044a578063e9818d221461048757610184565b806342842e0e1161010857806342842e0e1461028057806361d027b3146102a95780636352211e146102d457806369bcdb7d1461031157806370a082311461034e578063715018a61461038b57610184565b806301ffc9a71461018957806306fdde03146101c6578063081812fc146101f1578063095ea7b31461022e57806323b872dd1461025757610184565b36610184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017b90611ef5565b60405180910390fd5b600080fd5b34801561019557600080fd5b506101b060048036038101906101ab9190611f81565b6105d7565b6040516101bd9190611fc9565b60405180910390f35b3480156101d257600080fd5b506101db6106b9565b6040516101e89190612063565b60405180910390f35b3480156101fd57600080fd5b50610218600480360381019061021391906120bb565b61074b565b6040516102259190612129565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190612170565b610767565b005b34801561026357600080fd5b5061027e600480360381019061027991906121b0565b61077d565b005b34801561028c57600080fd5b506102a760048036038101906102a291906121b0565b61087f565b005b3480156102b557600080fd5b506102be61089f565b6040516102cb9190612224565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f691906120bb565b6108c5565b6040516103089190612129565b60405180910390f35b34801561031d57600080fd5b50610338600480360381019061033391906120bb565b6108d7565b6040516103459190612258565b60405180910390f35b34801561035a57600080fd5b5061037560048036038101906103709190612273565b61096a565b60405161038291906122af565b60405180910390f35b34801561039757600080fd5b506103a0610a24565b005b3480156103ae57600080fd5b506103b7610a38565b6040516103c49190612129565b60405180910390f35b3480156103d957600080fd5b506103e2610a62565b6040516103ef9190612063565b60405180910390f35b34801561040457600080fd5b5061041f600480360381019061041a91906122f6565b610af4565b005b34801561042d57600080fd5b506104486004803603810190610443919061246b565b610b0a565b005b34801561045657600080fd5b50610471600480360381019061046c91906120bb565b610b2f565b60405161047e9190612063565b60405180910390f35b6104a1600480360381019061049c91906125a6565b610c18565b005b3480156104af57600080fd5b506104ca60048036038101906104c59190612655565b610e19565b6040516104d79190611fc9565b60405180910390f35b3480156104ec57600080fd5b5061050760048036038101906105029190612695565b610ead565b6040516105149190611fc9565b60405180910390f35b34801561052957600080fd5b50610532611015565b60405161053f91906122af565b60405180910390f35b34801561055457600080fd5b5061056f600480360381019061056a91906126f5565b61101b565b005b34801561057d57600080fd5b5061059860048036038101906105939190612273565b611067565b005b3480156105a657600080fd5b506105c160048036038101906105bc91906120bb565b6110ed565b6040516105ce9190612258565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106a257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106b257506106b182611105565b5b9050919050565b6060600080546106c890612751565b80601f01602080910402602001604051908101604052809291908181526020018280546106f490612751565b80156107415780601f1061071657610100808354040283529160200191610741565b820191906000526020600020905b81548152906001019060200180831161072457829003601f168201915b5050505050905090565b60006107568261116f565b50610760826111f7565b9050919050565b6107798282610774611234565b61123c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107ef5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016107e69190612129565b60405180910390fd5b600061080383836107fe611234565b61124e565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610879578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161087093929190612782565b60405180910390fd5b50505050565b61089a83838360405180602001604052806000815250610b0a565b505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006108d08261116f565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166108f983611468565b73ffffffffffffffffffffffffffffffffffffffff160361094f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094690612805565b60405180910390fd5b600b6000838152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109dd5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016109d49190612129565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a2c6114a5565b610a36600061152c565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610a7190612751565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9d90612751565b8015610aea5780601f10610abf57610100808354040283529160200191610aea565b820191906000526020600020905b815481529060010190602001808311610acd57829003601f168201915b5050505050905090565b610b06610aff611234565b83836115f2565b5050565b610b1584848461077d565b610b29610b20611234565b85858585611761565b50505050565b6060600073ffffffffffffffffffffffffffffffffffffffff16610b5283611468565b73ffffffffffffffffffffffffffffffffffffffff1603610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f90612897565b60405180910390fd5b6040518060400160405280601d81526020017f68747470733a2f2f676174657761792e697066732e696f2f697066732f000000815250600a6000848152602001908152602001600020604051602001610c0292919061298b565b6040516020818303038152906040529050919050565b610c20611912565b80341015610c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5a906129fb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc990612a67565b60405180910390fd5b610cdc8787611958565b8484600a60008981526020019081526020016000209182610cfe929190612c29565b5082600b600088815260200190815260200160002081905550600061271060095483610d2a9190612d28565b610d349190612d99565b905060008183610d449190612dca565b9050610d72600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611976565b610d7c8482611976565b600083340390506000811115610d9757610d963382611976565b5b508373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16897ff61a3d65473a63beea4f6dd5a7bfab9bc0e671c90be51bcd4758bfb5a989e3948a8a888888604051610dfe959493929190612e2b565b60405180910390a45050610e10611a27565b50505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16610ecf85611468565b73ffffffffffffffffffffffffffffffffffffffff1614610f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1c90612eeb565b60405180910390fd5b6000600a60008681526020019081526020016000208054610f4590612751565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7190612751565b8015610fbe5780601f10610f9357610100808354040283529160200191610fbe565b820191906000526020600020905b815481529060010190602001808311610fa157829003601f168201915b505050505090506000818585604051602001610fdc93929190612f30565b604051602081830303815290604052805190602001209050600b6000878152602001908152602001600020548114925050509392505050565b60095481565b6110236114a5565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61106f6114a5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110e15760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016110d89190612129565b60405180910390fd5b6110ea8161152c565b50565b600b6020528060005260406000206000915090505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008061117b83611468565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111ee57826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016111e591906122af565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6112498383836001611a31565b505050565b60008061125a84611468565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461129c5761129b818486611bf6565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461132d576112de600085600080611a31565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146113b0576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6114ad611234565b73ffffffffffffffffffffffffffffffffffffffff166114cb610a38565b73ffffffffffffffffffffffffffffffffffffffff161461152a576114ee611234565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016115219190612129565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361166357816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161165a9190612129565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117549190611fc9565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b111561190b578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b81526004016117c09493929190612fab565b6020604051808303816000875af19250505080156117fc57506040513d601f19601f820116820180604052508101906117f9919061300c565b60015b611880573d806000811461182c576040519150601f19603f3d011682016040523d82523d6000602084013e611831565b606091505b50600081510361187857836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161186f9190612129565b60405180910390fd5b805160208201fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461190957836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016119009190612129565b60405180910390fd5b505b5050505050565b60026007540361194e576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600781905550565b611972828260405180602001604052806000815250611cba565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405161199c9061306a565b60006040518083038185875af1925050503d80600081146119d9576040519150601f19603f3d011682016040523d82523d6000602084013e6119de565b606091505b5050905080611a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a19906130cb565b60405180910390fd5b505050565b6001600781905550565b8080611a6a5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611b9e576000611a7a8461116f565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611ae557508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611af85750611af68184610e19565b155b15611b3a57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611b319190612129565b60405180910390fd5b8115611b9c57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611c01838383611cde565b611cb557600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c7657806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611c6d91906122af565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611cac9291906130eb565b60405180910390fd5b505050565b611cc48383611d9f565b611cd9611ccf611234565b6000858585611761565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611d9657508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d575750611d568484610e19565b5b80611d9557508273ffffffffffffffffffffffffffffffffffffffff16611d7d836111f7565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e115760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611e089190612129565b60405180910390fd5b6000611e1f8383600061124e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611e935760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611e8a9190612129565b60405180910390fd5b505050565b600082825260208201905092915050565b7f557365206d696e74576974685061796d656e7400000000000000000000000000600082015250565b6000611edf601383611e98565b9150611eea82611ea9565b602082019050919050565b60006020820190508181036000830152611f0e81611ed2565b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f5e81611f29565b8114611f6957600080fd5b50565b600081359050611f7b81611f55565b92915050565b600060208284031215611f9757611f96611f1f565b5b6000611fa584828501611f6c565b91505092915050565b60008115159050919050565b611fc381611fae565b82525050565b6000602082019050611fde6000830184611fba565b92915050565b600081519050919050565b60005b8381101561200d578082015181840152602081019050611ff2565b60008484015250505050565b6000601f19601f8301169050919050565b600061203582611fe4565b61203f8185611e98565b935061204f818560208601611fef565b61205881612019565b840191505092915050565b6000602082019050818103600083015261207d818461202a565b905092915050565b6000819050919050565b61209881612085565b81146120a357600080fd5b50565b6000813590506120b58161208f565b92915050565b6000602082840312156120d1576120d0611f1f565b5b60006120df848285016120a6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612113826120e8565b9050919050565b61212381612108565b82525050565b600060208201905061213e600083018461211a565b92915050565b61214d81612108565b811461215857600080fd5b50565b60008135905061216a81612144565b92915050565b6000806040838503121561218757612186611f1f565b5b60006121958582860161215b565b92505060206121a6858286016120a6565b9150509250929050565b6000806000606084860312156121c9576121c8611f1f565b5b60006121d78682870161215b565b93505060206121e88682870161215b565b92505060406121f9868287016120a6565b9150509250925092565b600061220e826120e8565b9050919050565b61221e81612203565b82525050565b60006020820190506122396000830184612215565b92915050565b6000819050919050565b6122528161223f565b82525050565b600060208201905061226d6000830184612249565b92915050565b60006020828403121561228957612288611f1f565b5b60006122978482850161215b565b91505092915050565b6122a981612085565b82525050565b60006020820190506122c460008301846122a0565b92915050565b6122d381611fae565b81146122de57600080fd5b50565b6000813590506122f0816122ca565b92915050565b6000806040838503121561230d5761230c611f1f565b5b600061231b8582860161215b565b925050602061232c858286016122e1565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61237882612019565b810181811067ffffffffffffffff8211171561239757612396612340565b5b80604052505050565b60006123aa611f15565b90506123b6828261236f565b919050565b600067ffffffffffffffff8211156123d6576123d5612340565b5b6123df82612019565b9050602081019050919050565b82818337600083830152505050565b600061240e612409846123bb565b6123a0565b90508281526020810184848401111561242a5761242961233b565b5b6124358482856123ec565b509392505050565b600082601f83011261245257612451612336565b5b81356124628482602086016123fb565b91505092915050565b6000806000806080858703121561248557612484611f1f565b5b60006124938782880161215b565b94505060206124a48782880161215b565b93505060406124b5878288016120a6565b925050606085013567ffffffffffffffff8111156124d6576124d5611f24565b5b6124e28782880161243d565b91505092959194509250565b600080fd5b600080fd5b60008083601f84011261250e5761250d612336565b5b8235905067ffffffffffffffff81111561252b5761252a6124ee565b5b602083019150836001820283011115612547576125466124f3565b5b9250929050565b6125578161223f565b811461256257600080fd5b50565b6000813590506125748161254e565b92915050565b61258381612203565b811461258e57600080fd5b50565b6000813590506125a08161257a565b92915050565b600080600080600080600060c0888a0312156125c5576125c4611f1f565b5b60006125d38a828b0161215b565b97505060206125e48a828b016120a6565b965050604088013567ffffffffffffffff81111561260557612604611f24565b5b6126118a828b016124f8565b955095505060606126248a828b01612565565b93505060806126358a828b01612591565b92505060a06126468a828b016120a6565b91505092959891949750929550565b6000806040838503121561266c5761266b611f1f565b5b600061267a8582860161215b565b925050602061268b8582860161215b565b9150509250929050565b6000806000604084860312156126ae576126ad611f1f565b5b60006126bc868287016120a6565b935050602084013567ffffffffffffffff8111156126dd576126dc611f24565b5b6126e9868287016124f8565b92509250509250925092565b60006020828403121561270b5761270a611f1f565b5b600061271984828501612591565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061276957607f821691505b60208210810361277c5761277b612722565b5b50919050565b6000606082019050612797600083018661211a565b6127a460208301856122a0565b6127b1604083018461211a565b949350505050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b60006127ef601483611e98565b91506127fa826127b9565b602082019050919050565b6000602082019050818103600083015261281e816127e2565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612881602f83611e98565b915061288c82612825565b604082019050919050565b600060208201905081810360008301526128b081612874565b9050919050565b600081905092915050565b60006128cd82611fe4565b6128d781856128b7565b93506128e7818560208601611fef565b80840191505092915050565b60008190508160005260206000209050919050565b6000815461291581612751565b61291f81866128b7565b9450600182166000811461293a576001811461294f57612982565b60ff1983168652811515820286019350612982565b612958856128f3565b60005b8381101561297a5781548189015260018201915060208101905061295b565b838801955050505b50505092915050565b600061299782856128c2565b91506129a38284612908565b91508190509392505050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b60006129e5601483611e98565b91506129f0826129af565b602082019050919050565b60006020820190508181036000830152612a14816129d8565b9050919050565b7f496e76616c6964206f7267616e697a6572000000000000000000000000000000600082015250565b6000612a51601183611e98565b9150612a5c82612a1b565b602082019050919050565b60006020820190508181036000830152612a8081612a44565b9050919050565b600082905092915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612adf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612aa2565b612ae98683612aa2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b26612b21612b1c84612085565b612b01565b612085565b9050919050565b6000819050919050565b612b4083612b0b565b612b54612b4c82612b2d565b848454612aaf565b825550505050565b600090565b612b69612b5c565b612b74818484612b37565b505050565b5b81811015612b9857612b8d600082612b61565b600181019050612b7a565b5050565b601f821115612bdd57612bae816128f3565b612bb784612a92565b81016020851015612bc6578190505b612bda612bd285612a92565b830182612b79565b50505b505050565b600082821c905092915050565b6000612c0060001984600802612be2565b1980831691505092915050565b6000612c198383612bef565b9150826002028217905092915050565b612c338383612a87565b67ffffffffffffffff811115612c4c57612c4b612340565b5b612c568254612751565b612c61828285612b9c565b6000601f831160018114612c905760008415612c7e578287013590505b612c888582612c0d565b865550612cf0565b601f198416612c9e866128f3565b60005b82811015612cc657848901358255600182019150602085019450602081019050612ca1565b86831015612ce35784890135612cdf601f891682612bef565b8355505b6001600288020188555050505b50505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d3382612085565b9150612d3e83612085565b9250828202612d4c81612085565b91508282048414831517612d6357612d62612cf9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612da482612085565b9150612daf83612085565b925082612dbf57612dbe612d6a565b5b828204905092915050565b6000612dd582612085565b9150612de083612085565b9250828203905081811115612df857612df7612cf9565b5b92915050565b6000612e0a8385611e98565b9350612e178385846123ec565b612e2083612019565b840190509392505050565b60006080820190508181036000830152612e46818789612dfe565b9050612e5560208301866122a0565b612e6260408301856122a0565b612e6f60608301846122a0565b9695505050505050565b7f43616c6c6572206973206e6f7420746865206f776e6572206f6620746865204e60008201527f46542e0000000000000000000000000000000000000000000000000000000000602082015250565b6000612ed5602383611e98565b9150612ee082612e79565b604082019050919050565b60006020820190508181036000830152612f0481612ec8565b9050919050565b6000612f1783856128b7565b9350612f248385846123ec565b82840190509392505050565b6000612f3c82866128c2565b9150612f49828486612f0b565b9150819050949350505050565b600081519050919050565b600082825260208201905092915050565b6000612f7d82612f56565b612f878185612f61565b9350612f97818560208601611fef565b612fa081612019565b840191505092915050565b6000608082019050612fc0600083018761211a565b612fcd602083018661211a565b612fda60408301856122a0565b8181036060830152612fec8184612f72565b905095945050505050565b60008151905061300681611f55565b92915050565b60006020828403121561302257613021611f1f565b5b600061303084828501612ff7565b91505092915050565b600081905092915050565b50565b6000613054600083613039565b915061305f82613044565b600082019050919050565b600061307582613047565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006130b5600f83611e98565b91506130c08261307f565b602082019050919050565b600060208201905081810360008301526130e4816130a8565b9050919050565b6000604082019050613100600083018561211a565b61310d60208301846122a0565b939250505056fea264697066735822122082e742fc34d27cd54c6f2c6fd9de5bf96ce9b5a3ab09b4d06fa8865223c8966164736f6c634300081c0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETCOMMITMENT = "getCommitment";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTWITHPAYMENT = "mintWithPayment";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PLATFORMFEERATE = "platformFeeRate";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETTREASURY = "setTreasury";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENCOMMITMENTS = "tokenCommitments";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TREASURY = "treasury";

    public static final String FUNC_VERIFYTICKET = "verifyTicket";

    public static final CustomError ERC721INCORRECTOWNER_ERROR = new CustomError("ERC721IncorrectOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INSUFFICIENTAPPROVAL_ERROR = new CustomError("ERC721InsufficientApproval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final CustomError ERC721INVALIDAPPROVER_ERROR = new CustomError("ERC721InvalidApprover", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDOPERATOR_ERROR = new CustomError("ERC721InvalidOperator", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDOWNER_ERROR = new CustomError("ERC721InvalidOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDRECEIVER_ERROR = new CustomError("ERC721InvalidReceiver", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721INVALIDSENDER_ERROR = new CustomError("ERC721InvalidSender", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError ERC721NONEXISTENTTOKEN_ERROR = new CustomError("ERC721NonexistentToken", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final CustomError OWNABLEINVALIDOWNER_ERROR = new CustomError("OwnableInvalidOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError OWNABLEUNAUTHORIZEDACCOUNT_ERROR = new CustomError("OwnableUnauthorizedAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final CustomError REENTRANCYGUARDREENTRANTCALL_ERROR = new CustomError("ReentrancyGuardReentrantCall", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TICKETMINTED_EVENT = new Event("TicketMinted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected TicketNFT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TicketNFT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TicketNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TicketNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TicketMintedEventResponse> getTicketMintedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TICKETMINTED_EVENT, transactionReceipt);
        ArrayList<TicketMintedEventResponse> responses = new ArrayList<TicketMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TicketMintedEventResponse typedResponse = new TicketMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.organizer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.metadataURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pricePaid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.platformFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.organizerPayout = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TicketMintedEventResponse getTicketMintedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TICKETMINTED_EVENT, log);
        TicketMintedEventResponse typedResponse = new TicketMintedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.organizer = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.metadataURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.pricePaid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.platformFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.organizerPayout = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<TicketMintedEventResponse> ticketMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTicketMintedEventFromLog(log));
    }

    public Flowable<TicketMintedEventResponse> ticketMintedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TICKETMINTED_EVENT));
        return ticketMintedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getCommitment(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETCOMMITMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintWithPayment(String to, BigInteger tokenId,
                                                                  String metadataCID, byte[] commitmentHash, String organizerAddress,
                                                                  BigInteger ticketPrice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINTWITHPAYMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                        new org.web3j.abi.datatypes.Utf8String(metadataCID),
                        new org.web3j.abi.datatypes.generated.Bytes32(commitmentHash),
                        new org.web3j.abi.datatypes.Address(160, organizerAddress),
                        new org.web3j.abi.datatypes.generated.Uint256(ticketPrice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> platformFeeRate() {
        final Function function = new Function(FUNC_PLATFORMFEERATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTreasury(String _newTreasury) {
        final Function function = new Function(
                FUNC_SETTREASURY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newTreasury)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> tokenCommitments(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENCOMMITMENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> treasury() {
        final Function function = new Function(FUNC_TREASURY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> verifyTicket(BigInteger tokenId, String secretNonce) {
        final Function function = new Function(FUNC_VERIFYTICKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(secretNonce)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static TicketNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new TicketNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TicketNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TicketNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TicketNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new TicketNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TicketNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TicketNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TicketNFT> deploy(Web3j web3j, Credentials credentials,
                                               ContractGasProvider contractGasProvider, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TicketNFT> deploy(Web3j web3j, TransactionManager transactionManager,
                                               ContractGasProvider contractGasProvider, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TicketNFT> deploy(Web3j web3j, Credentials credentials,
                                               BigInteger gasPrice, BigInteger gasLimit, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TicketNFT> deploy(Web3j web3j, TransactionManager transactionManager,
                                               BigInteger gasPrice, BigInteger gasLimit, String _treasury) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)));
        return deployRemoteCall(TicketNFT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TicketMintedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String buyer;

        public String organizer;

        public String metadataURI;

        public BigInteger pricePaid;

        public BigInteger platformFee;

        public BigInteger organizerPayout;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
